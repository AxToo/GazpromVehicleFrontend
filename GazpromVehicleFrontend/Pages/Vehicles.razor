@page "/Vehicles"
@using System.Text
@using System.Text.Json
@attribute [Authorize(Roles = "Admin")]


<MudStack Justify="Justify.Center" AlignItems="AlignItems.Stretch" Spacing="2">
    <MudTable Items="VehiclesDto" Hover="true" Dense="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Транспорт</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" 
                           Color="Color.Inherit" 
                           Edge="Edge.End"
                           OnClick="@( async () => await AddVehicle())"/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Модель</MudTh>
            <MudTh>Гос. Номер</MudTh>
            <MudTh>Статус проверки</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Модель">@context.Brand</MudTd>
            <MudTd DataLabel="Гос. Номер">@context.RegistrationNumber</MudTd>
            <MudTd DataLabel="Статус проверки">
                <MudChip Color="@(context.IsChecked ? Color.Success : Color.Warning)">
                    @(context.IsChecked ? "Проверенно" : "Не проверенно")
                </MudChip>
            </MudTd>
            <MudTd>
                <MudIconButton Color="Color.Error" Icon="@Icons.Filled.DeleteForever" Size="Size.Small" OnClick="@( async () => await RemoveVehicle(context.RegistrationNumber))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudStack>

@code
{
    [Inject] private HttpClient Client { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject]private ISnackbar Snackbar { get; set; }

    private List<VehicleDto> VehiclesDto { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetAllVehicles();
    }

    private async Task AddVehicle()
    {
        var dialog = await DialogService.ShowAsync<VehicleDialog>("Добавить транспорт");
        var result = await dialog.Result;

        await GetAllVehicles();
    }

    private async Task RemoveVehicle(string regNumber)
    {
        var body = new RemoveVehicleRequest
        {
            RegNumber = regNumber
        };
        var request = new HttpRequestMessage
        {
            Content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json"),
            Method = HttpMethod.Delete,
            RequestUri = new Uri("/api/vehicles/removeByRegNumber", UriKind.Relative)
        };

        var dialogResult = await DialogService.ShowMessageBox("Warning",
            $"Удалить транспортное средство {regNumber}?",
            yesText: "Удалить", cancelText: "Отмена");

        if (dialogResult != null)
        {
            var result = await Client.SendAsync(request);

            var message = result.IsSuccessStatusCode
                ? $"Транспорт с гос.номером {regNumber} успешно удален"
                : result.ReasonPhrase;

            var severity = result.IsSuccessStatusCode ? Severity.Success : Severity.Error;

            Snackbar.Add(message, severity);

            await GetAllVehicles();
        }
        
        StateHasChanged();
    }

    private async Task GetAllVehicles() => VehiclesDto = await Client.GetFromJsonAsync<List<VehicleDto>>("/api/vehicles");
}
